//Ryan Danner
//669192370
//ECE 367


//https://docs.google.com/document/d/17wm5blHSRX5KABwHkPg1_kzGSp1fQPdGYjryReMuwuo/edit?usp=sharing

/* Some include (header) files needed by Codewarrior with machine info for the NanoCore12        */

#include <hidef.h>           /* common defines and macros */
#include <stdio.h>
#include "derivative.h"      /* derivative-specific definitions */


/* We need to define some constants. Similar to EQU's in assembly                                */
/* The commented out defines already exist in one of the above header files. The compiler        */
/* does not like the redundancy. So, they are commented out with the // symbols                  */

#define     IOREGS_BASE  0x0000

#define     _IO8(off)    *(unsigned char  volatile *)(IOREGS_BASE + off) //define form prototype 8-bit
#define     _IO16(off)   *(unsigned short volatile *)(IOREGS_BASE + off) //define form prototype 16-bit


#define   PORTT     _IO8(0x240)     /* portT data register is unsigned 8-bit at address $0240        */
/* because of the form prototype defines above this is the same as                                   */                                                                 
/* #define PORTT *(unsigned char  volatile *) (0x240);    Means PORTT points to address $0240        */
/* the statement PORTT = 0x34; means to store $34 at location $0240                                  */
/* if the contents of PORTT is 0xd3 then the assignment x = PORTT; means x is now equal to 0xd3      */
/*****************************************************************************************************/
#define   PORTTi     _IO8(0x241)    // portT data register
#define   keypad    PORTT
#define   PORTM     _IO8(0x250)     // portM data register
//#define     TSCR1   _IO8(0x46)     //timer system control register
#define     MCCTL   _IO8(0x66)     //modulus down conunter control
#define     MCFLG   _IO8(0x67)     //down counter flags
#define     MCCNT   _IO16(0x76)    //modulus down counter register
//#define     PTT	  	_IO8(0x240)    //portt data register
//#define     DDRT		_IO8(0x242)    //portt direction register
//#define     CRGFLG  _IO8(0x37)     //pll flags register
//#define     SYNR    _IO8(0x34)     //synthesizer / multiplier register
//#define     REFDV   _IO8(0x35)     //reference divider register
//#define     CLKSEL  _IO8(0x39)     //clock select register
//#define     PLLCTL  _IO8(0x3a)     //pll control register

                                                                                                               
// Let's define some bit locations for some flags and config bits
#define     PLLSEL  0x80
#define     LOCK    0x08
#define     TFFCA   0x10
#define     MCZF    0x80
#define     BIT0    0x01
#define     BIT1    0x02
#define     BIT2    0x04
#define     BIT3    0x08

//Serial communication definitions
#define     ENABLE  0x02
#define     SPCR1   0xD8
#define     SPCR2   0xD9
#define     SPIB    0xDA
#define     SPSR    0xDB 
#define     SPDR    0xDD
#define     RCK     0x08
#define     IRQCR   0x1E




// Prototype for IRQ Interrupt Service Routine function named irqISR
// The interrupt vectors are initilized in the Linker files 
extern void near irqISR(void);
extern void near EdgeInterrupt(void);


// Global variables 
int lightValue=0;
int tempValue=0;
int voltValue=0;
//this table was calculate in excel using a step size of 2 
//the values get adjusted while printing to make the step size .02                           
unsigned int table[]={0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510};
int temperatureC[]={0,-64,-56,-51,-48,-45,-42,-40,-38,-37,-35,-34,-33,-31,-30,-29,-28,-27,-26,-25,-24,-24,-23,-22,-21,-21,-20,-19,-19,-18,-17,-17,-16,-16,-15,-14,-14,-13,-13,-12,-12,-11,-11,-10,-10,-9,-9,-8,-8,-8,-7,-7,-6,-6,-5,-5,-5,-4,-4,-3,-3,-3,-2,-2,-1,-1,-1,1,1,1,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,27,27,27,28,28,28,29,29,29,30,30,31,31,31,32,32,32,33,33,34,34,34,35,35,36,36,36,37,37,38,38,38,39,39,40,40,41,41,42,42,43,43,43,44,44,45,45,46,46,47,48,48,49,49,50,50,51,51,52,53,53,54,55,55,56,57,57,58,59,59,60,61,62,63,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,81,83,84,86,88,90,92,94,96,98,101,104,107,111,115,120,125,131,139,149,162,182,221};
unsigned int temperatureF[]={0,-83,-69,-60,-54,-48,-44,-40,-37,-34,-31,-29,-26,-24,-22,-20,-18,-16,-15,-13,-12,-10,-9,-7,-6,-5,-3,-2,-1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17,18,19,20,21,21,22,23,24,24,25,26,27,27,28,29,29,30,31,32,32,33,34,34,35,36,36,37,38,38,39,39,40,41,41,42,43,43,44,44,45,46,46,47,48,48,49,49,50,51,51,52,52,53,54,54,55,55,56,56,57,58,58,59,59,60,61,61,62,62,63,64,64,65,65,66,67,67,68,68,69,70,70,71,71,72,73,73,74,74,75,76,76,77,77,78,79,79,80,81,81,82,83,83,84,85,85,86,87,87,88,89,89,90,91,91,92,93,93,94,95,96,96,97,98,99,99,100,101,102,102,103,104,105,106,106,107,108,109,110,111,112,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,135,136,137,139,140,141,143,144,146,147,149,151,152,154,156,158,159,161,163,166,168,170,172,175,178,180,183,186,189,193,196,200,204,209,214,219,225,231,238,247,256,268,281,299,323,359,429};
unsigned int RPMArray[]={3125,3104,3083,3062,3041,3021,3000,2981,2961,2942,2923,2904,2885,2867,2849,2831,2813,2796,2778,2761,2744,2728,2711,2695,2679,2663,2648,2632,2617};
char volts[16]="                ";
char tempF[16]="                ";
char tempC[16]="                ";
char light[16]="                ";
int flag=0;

char rpmArray[16]="                "; //array to hold RPM value
unsigned int start=0;
unsigned int end=0;
unsigned int buffer=0;
int timeCycles=0;
int timePeriod=0;
int RPM=0;





/* Here we give function prototypes before we start on the main code */

void SetClk8(void); 
void delayby1ms(int k);
void Print(char a);
void initLCD(void);
void command(int a);
void RefreshMenu(char line1[16],char line2[16]);
int GetValue(void);
int GetTemp(void);
int GetLight(void);
void GetSensor(void);
void GetRPM(void);

/* The main program begins here */

void main(void) 
{
  //variable declarations have to go at the top of scope
  
  int result=0;
  int i=0,j=0,k=0,l=0,m=0,n=0;           //looping variables
  

  SetClk8();                  // go setup the PLL

    // this is setting the CC register for interrupts and enabling edge triggering for irq
    asm(ANDCC #$BF); 
    asm(MOVB #$C0,IRQCR); 
  
     //serial communication setup
    SPICR1= 0x50; //enable SPI and make HCS12 the master
    SPICR2= 0x00; //cleared as a good measure
    SPIBR = 0x22; //setting the baud rate for serial communication
  
    // setup the data direction registers
    
    DDRM = 0x3B;
    DDRT = 0x02; 
    MODRR=0x02;  //similar to DDRT but specific for PWM
    PORTM = 0x08;                // clear PortM
    
    //timer setup code
    TSCR1 = 0x90;      /* enable TCNT and fast timer flag clear */
    TSCR2 = 0x06;      /* disable timer interrupt, set prescaler to 64 */
    TIOS  = 0x01;     /* channel 0 output compare, rest input capture*/
    
    TCTL3=0x00;   //want no triggers here
    TCTL4 = 0x20; //trigger channel 2 on the falling edge
    //TIE = 0x04;  //want to enable an interrupt on channel 2 when it encounters a falling edge
     
    TFLG1 = 0x0F;     /* clear all timer flags*/
       
    ATDCTL2 = 0x80;    //turn on the ADC module
      
    // does the necessary series of steps to make the LCD start taking input
    initLCD(); 
    
    
    
    
    
     
    
    //PWM setup
    //want about a 25KHz time period
    
    PWMCLK=0x00;  //set A as the clock source
    PWMPRCLK=0x02; //want a prescale of 4
    PWMPOL=0x02;  //set pin 0 to start high
    PWMCAE=0x00;   //left aligned mode
    PWMCTL=0x0C;   //8 bit mode
    PWMPER1=240;    //approximating the time period as 255 cycles, this is more like 2.35KHz but it should work fine
    PWMDTY1=100;    //this is the time on
    PWMCNT1=0x00;  //reset channel 1 count
    PWME=0x02;     //enable channel 1  
    
    
    while(1){
    voltValue=GetValue();
    //want to resrict the range of the duty cycle because we don't want the fan to stall 35% is about the lowest it should run at so anything <85 will be interpreted as 85
    //I think this may affect the hall effect sensor if it spins too slowly the time period will be too great
    if (voltValue<85)
      voltValue=85;
    PWMDTY1=voltValue;
    GetRPM();
    
    //this is mapping the time it takes cycles into an RPM value using the equation RPM=11250000/#cycles 
    //this was done with a lookup table
    if(timeCycles<3600){
      j=0;
    }else if(timeCycles<3625){
      j=1;
    }else if(timeCycles<3650){
      j=2;
    }else if(timeCycles<3675){
      j=3;
    }else if(timeCycles<3700){
      j=4;
    }else if(timeCycles<3725){
      j=5;
    }else if(timeCycles<3750){
      j=6;
    }else if(timeCycles<3775){
      j=7;
    }else if(timeCycles<3800){
      j=8;
    }else if(timeCycles<3825){
      j=9;
    }else if(timeCycles<3850){
      j=10;
    }else if(timeCycles<3875){
      j=11;
    }else if(timeCycles<3900){
      j=12;
    }else if(timeCycles<3925){
      j=13;
    }else if(timeCycles<3950){
      j=14;
    }else if(timeCycles<3975){
      j=15;
    }else if(timeCycles<4000){
      j=16;
    }else if(timeCycles<4025){
      j=17;
    }else if(timeCycles<4050){
      j=18;
    }else if(timeCycles<4075){
      j=19;
    }else if(timeCycles<4100){
      j=20;
    }else if(timeCycles<4125){
      j=21;
    }else if(timeCycles<4150){
      j=22;
    }else if(timeCycles<4175){
      j=23;
    }else if(timeCycles<4200){
      j=24;
    }else if(timeCycles<4225){
      j=25;
    }else if(timeCycles<4250){
      j=26;
    }else if(timeCycles<4275){
      j=27;
    }else{
      j=28;
    }
    sprintf(volts,"%d",voltValue);
    sprintf(rpmArray,"%d",RPMArray[j]);
    RefreshMenu(volts,rpmArray);
    
    for(i=0;i<15;i++){              //clear the all arrays for new formatting next time
         rpmArray[i]=' '; 
         volts[i]=' ';
        }
    
    delayby1ms(50); 
    }
    
  
    
	
	EnableInterrupts;    // same as asm(cli)


  for(;;) {
    _FEED_COP(); /* feeds the dog */
  }              /* loop forever */
                 /* please make sure that you never leave main */
}                /* else bad things may happen.*/



/*********************************************************************/
/* The following function creates a time delay which is equal to the */
/* multiple of 1ms. The value passed in k specifies the number of    */
/* milliseconds to be delayed.                                       */
/*********************************************************************/
void delayby1ms(int k)
{
     int ix;     
     TC0 = TCNT + 375; 
     for(ix = 0; ix < k; ix++) {
            while(!(TFLG1 & BIT0));
            TC0 += 375;
         }
       
     TFLG1=0x01;
}


/********************************************************************/
/* This function enables PLL and use an 8-MHz crystal oscillator to */
/* generate 24-MHz E clock. Same as done in assembler.              */
/********************************************************************/
void SetClk8(void) 
{
    asm(sei);          // turn of interrupts
    CLKSEL  &= PLLSEL; // disengage PLL from system
    SYNR    = 0x02;    // set SYSCLK to 24 MHz from a 4-MHz oscillator
    REFDV   = 0;       //  
    PLLCTL  = 0x40;    // turn on PLL, set automatic 
    while(!(CRGFLG & LOCK)); // wait for HIGN on LOCK bit at address CRGFLG
    asm(nop);          // very short delays
    asm(nop);
    CLKSEL  |= PLLSEL; // clock derived from PLL
    asm(cli);          // turn on interrups
}

//there is a separate print and command function, only thing different is the value of RS
//I did this for readability of the code
void Print(char a){

  while(!(SPISR & 0x20)); //Wait for register empty flag (SPIEF)

    SPIDR = a;              //Output command via SPI to SIPO
    while(!(SPISR & 0x80)); //Wait for SPI Flag
    a = SPIDR;              //Equate a with SPIDR
    asm(nop);               //Wait for 1 cycle
    PORTM = PORTM & ~RCK;          //Pulse RCK
    asm(nop);               //Wait for 1 cycle
    asm(nop);               //Wait for 1 cycle
    PORTM = PORTM |RCK;    //DataReadyfor LCD
    PORTM =PORTM |0x01;         //RS   = $01
    // Note use PORTM = PORTM & ~RSto send command instead of data
    asm(nop);               //Wait for 1 cycle
    asm(nop);               //Wait for 1 cycle
    asm(nop);              //Wait for 1 cycle
    PORTM = PORTM |ENABLE;        //Fire ENABLE= $02 
    asm(nop);               //Wait for 1 cycle
    asm(nop);               //Wait for 1 cycle
    PORTM = PORTM &~ENABLE;       //ENABLE off
    delayby1ms(1);                //Delay
}

void command(int a){

  while(!(SPISR & 0x20)); //Wait for register empty flag (SPIEF)

    SPIDR = a;              //Output command via SPI to SIPO
    while(!(SPISR & 0x80)); //Wait for SPI Flag
    a = SPIDR;              //Equate a with SPIDR
    asm(nop);               //Wait for 1 cycle
    PORTM = PORTM & ~RCK;          //Pulse RCK
    asm(nop);               //Wait for 1 cycle
    asm(nop);               //Wait for 1 cycle
    PORTM = PORTM |RCK;    //DataReadyfor LCD
    PORTM =0x00;         //RS   = $00 for commands
    // Note use PORTM = PORTM & ~RSto send command instead of data
    asm(nop);               //Wait for 1 cycle
    asm(nop);               //Wait for 1 cycle
    asm(nop);              //Wait for 1 cycle
    PORTM = PORTM |ENABLE;        //Fire ENABLE= $02 
    asm(nop);               //Wait for 1 cycle
    asm(nop);               //Wait for 1 cycle
    PORTM = PORTM &~ENABLE;       //ENABLE off
    delayby1ms(1);                //Delay
}

int GetValue(){
    
    PORTM = PORTM & ~RCK;          //Pulse RCK    RCK=0x08
    asm(nop);               //Wait for 1 cycle
    asm(nop);               //Wait for 1 cycle
    PORTM = PORTM |RCK;
    asm(nop);
    
    while(!(SPISR & 0x20)); //Wait for register empty flag (SPIEF)
    SPIDR=0xFF;
    while(!(SPISR & 0x80)); //Wait for SPI Flag
    asm(nop);
    
    return SPIDR;          //want the value out of SPIDR read in from PISO
 
}


//this does the necessary things to setup the LCD
void initLCD(){
  int i;
  for(i=0;i<4;i++){
    delayby1ms(2);
    command(0x30);
  }
  
  delayby1ms(2);
  command(0x38);
  
  delayby1ms(2);
  command(0x0C);
  
  delayby1ms(2);
  command(0x01);
  
  delayby1ms(2);
}



//this is a function to simplify display updating
//you give it the first and second lines you want it to print
void RefreshMenu(char line1[16],char line2[16]){
  int i=0;
  
  for(i=0;i<16;i++){
       Print(line1[i]); //writes the array to the top line
    }
    
    command(0xC0);
    
    for(i=0;i<16;i++){
       Print(line2[i]); //writes to the bottom line
    }
    command(0x02);//return home
  
}

//this gets the readings from the attached sensors
void GetSensor(){
  
  
  ATDCTL3 =0x08;           //taking one sample
  ATDCTL4 =0x85;           //8 bit at 2MHz 
  ATDCTL5 =0x80;           //convert, right justified, unsigned, single scan of channel 0 
  while(!(ATDSTAT0 & 0x80)); //wait for the sequence complete flag
  tempValue=ATDDR0;       //put the result in temperature measurment
  
  
  ATDCTL4 =0x05;           //10 bit at 2MHz 
  ATDCTL5 =0x81;           //convert, right justified, unsigned, single scan of channel 1 
  while(!(ATDSTAT0 & 0x80)); //wait for the sequence complete flag
  lightValue=ATDDR0;       //put the result into light measurment
  //taking one sample at a time means that both results will be in ATDDR0

}

//this is used to switch among the 3 display layouts
interrupt void irqISR(void)
{
       if(flag<2){
        flag++;
       }
       else{
        flag=0; 
       }
}

void GetRPM(void){
        TFLG1 = 0x04;  //clear the flag
        while(!(TFLG1&0x04));   //wait for channel 2 flag to be set
        TFLG1 = 0x04;  //clear the flag
        start=TC2;
        while(!(TFLG1&0x04));   //wait for channel 2 flag to be set
        end=TC2;
        if(start>end){
          buffer=0xFFFE-start+end; //this is an edge case where the time rolls over
          if(buffer>100)
            timeCycles=buffer;
        } else{ 
        buffer=end-start;  //# of clocks passed between falling edges
        if(buffer>100)
          timeCycles=buffer;
        }
          
}



